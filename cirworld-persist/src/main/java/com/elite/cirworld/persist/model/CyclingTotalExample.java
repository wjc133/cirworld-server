package com.elite.cirworld.persist.model;

import java.util.ArrayList;
import java.util.List;

public class CyclingTotalExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    private Integer limit;

    private Integer offset;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public CyclingTotalExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }

    public Integer getLimit() {
        return limit;
    }

    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    public Integer getOffset() {
        return offset;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andUidIsNull() {
            addCriterion("uid is null");
            return (Criteria) this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("uid is not null");
            return (Criteria) this;
        }

        public Criteria andUidEqualTo(Long value) {
            addCriterion("uid =", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotEqualTo(Long value) {
            addCriterion("uid <>", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThan(Long value) {
            addCriterion("uid >", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Long value) {
            addCriterion("uid >=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThan(Long value) {
            addCriterion("uid <", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualTo(Long value) {
            addCriterion("uid <=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidIn(List<Long> values) {
            addCriterion("uid in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotIn(List<Long> values) {
            addCriterion("uid not in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidBetween(Long value1, Long value2) {
            addCriterion("uid between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotBetween(Long value1, Long value2) {
            addCriterion("uid not between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andDistanceIsNull() {
            addCriterion("distance is null");
            return (Criteria) this;
        }

        public Criteria andDistanceIsNotNull() {
            addCriterion("distance is not null");
            return (Criteria) this;
        }

        public Criteria andDistanceEqualTo(Integer value) {
            addCriterion("distance =", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceNotEqualTo(Integer value) {
            addCriterion("distance <>", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceGreaterThan(Integer value) {
            addCriterion("distance >", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceGreaterThanOrEqualTo(Integer value) {
            addCriterion("distance >=", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceLessThan(Integer value) {
            addCriterion("distance <", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceLessThanOrEqualTo(Integer value) {
            addCriterion("distance <=", value, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceIn(List<Integer> values) {
            addCriterion("distance in", values, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceNotIn(List<Integer> values) {
            addCriterion("distance not in", values, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceBetween(Integer value1, Integer value2) {
            addCriterion("distance between", value1, value2, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceNotBetween(Integer value1, Integer value2) {
            addCriterion("distance not between", value1, value2, "distance");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedIsNull() {
            addCriterion("max_speed is null");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedIsNotNull() {
            addCriterion("max_speed is not null");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedEqualTo(Float value) {
            addCriterion("max_speed =", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedNotEqualTo(Float value) {
            addCriterion("max_speed <>", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedGreaterThan(Float value) {
            addCriterion("max_speed >", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedGreaterThanOrEqualTo(Float value) {
            addCriterion("max_speed >=", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedLessThan(Float value) {
            addCriterion("max_speed <", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedLessThanOrEqualTo(Float value) {
            addCriterion("max_speed <=", value, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedIn(List<Float> values) {
            addCriterion("max_speed in", values, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedNotIn(List<Float> values) {
            addCriterion("max_speed not in", values, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedBetween(Float value1, Float value2) {
            addCriterion("max_speed between", value1, value2, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxSpeedNotBetween(Float value1, Float value2) {
            addCriterion("max_speed not between", value1, value2, "maxSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedIsNull() {
            addCriterion("average_speed is null");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedIsNotNull() {
            addCriterion("average_speed is not null");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedEqualTo(Float value) {
            addCriterion("average_speed =", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedNotEqualTo(Float value) {
            addCriterion("average_speed <>", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedGreaterThan(Float value) {
            addCriterion("average_speed >", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedGreaterThanOrEqualTo(Float value) {
            addCriterion("average_speed >=", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedLessThan(Float value) {
            addCriterion("average_speed <", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedLessThanOrEqualTo(Float value) {
            addCriterion("average_speed <=", value, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedIn(List<Float> values) {
            addCriterion("average_speed in", values, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedNotIn(List<Float> values) {
            addCriterion("average_speed not in", values, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedBetween(Float value1, Float value2) {
            addCriterion("average_speed between", value1, value2, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andAverageSpeedNotBetween(Float value1, Float value2) {
            addCriterion("average_speed not between", value1, value2, "averageSpeed");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeIsNull() {
            addCriterion("max_altitude is null");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeIsNotNull() {
            addCriterion("max_altitude is not null");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeEqualTo(Float value) {
            addCriterion("max_altitude =", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeNotEqualTo(Float value) {
            addCriterion("max_altitude <>", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeGreaterThan(Float value) {
            addCriterion("max_altitude >", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("max_altitude >=", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeLessThan(Float value) {
            addCriterion("max_altitude <", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeLessThanOrEqualTo(Float value) {
            addCriterion("max_altitude <=", value, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeIn(List<Float> values) {
            addCriterion("max_altitude in", values, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeNotIn(List<Float> values) {
            addCriterion("max_altitude not in", values, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeBetween(Float value1, Float value2) {
            addCriterion("max_altitude between", value1, value2, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxAltitudeNotBetween(Float value1, Float value2) {
            addCriterion("max_altitude not between", value1, value2, "maxAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeIsNull() {
            addCriterion("min_altitude is null");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeIsNotNull() {
            addCriterion("min_altitude is not null");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeEqualTo(Float value) {
            addCriterion("min_altitude =", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeNotEqualTo(Float value) {
            addCriterion("min_altitude <>", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeGreaterThan(Float value) {
            addCriterion("min_altitude >", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("min_altitude >=", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeLessThan(Float value) {
            addCriterion("min_altitude <", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeLessThanOrEqualTo(Float value) {
            addCriterion("min_altitude <=", value, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeIn(List<Float> values) {
            addCriterion("min_altitude in", values, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeNotIn(List<Float> values) {
            addCriterion("min_altitude not in", values, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeBetween(Float value1, Float value2) {
            addCriterion("min_altitude between", value1, value2, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMinAltitudeNotBetween(Float value1, Float value2) {
            addCriterion("min_altitude not between", value1, value2, "minAltitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeIsNull() {
            addCriterion("max_longitude is null");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeIsNotNull() {
            addCriterion("max_longitude is not null");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeEqualTo(Float value) {
            addCriterion("max_longitude =", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeNotEqualTo(Float value) {
            addCriterion("max_longitude <>", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeGreaterThan(Float value) {
            addCriterion("max_longitude >", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("max_longitude >=", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeLessThan(Float value) {
            addCriterion("max_longitude <", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeLessThanOrEqualTo(Float value) {
            addCriterion("max_longitude <=", value, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeIn(List<Float> values) {
            addCriterion("max_longitude in", values, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeNotIn(List<Float> values) {
            addCriterion("max_longitude not in", values, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeBetween(Float value1, Float value2) {
            addCriterion("max_longitude between", value1, value2, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLongitudeNotBetween(Float value1, Float value2) {
            addCriterion("max_longitude not between", value1, value2, "maxLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeIsNull() {
            addCriterion("min_longitude is null");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeIsNotNull() {
            addCriterion("min_longitude is not null");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeEqualTo(Float value) {
            addCriterion("min_longitude =", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeNotEqualTo(Float value) {
            addCriterion("min_longitude <>", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeGreaterThan(Float value) {
            addCriterion("min_longitude >", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("min_longitude >=", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeLessThan(Float value) {
            addCriterion("min_longitude <", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeLessThanOrEqualTo(Float value) {
            addCriterion("min_longitude <=", value, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeIn(List<Float> values) {
            addCriterion("min_longitude in", values, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeNotIn(List<Float> values) {
            addCriterion("min_longitude not in", values, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeBetween(Float value1, Float value2) {
            addCriterion("min_longitude between", value1, value2, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMinLongitudeNotBetween(Float value1, Float value2) {
            addCriterion("min_longitude not between", value1, value2, "minLongitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeIsNull() {
            addCriterion("max_latitude is null");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeIsNotNull() {
            addCriterion("max_latitude is not null");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeEqualTo(Float value) {
            addCriterion("max_latitude =", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeNotEqualTo(Float value) {
            addCriterion("max_latitude <>", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeGreaterThan(Float value) {
            addCriterion("max_latitude >", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("max_latitude >=", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeLessThan(Float value) {
            addCriterion("max_latitude <", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeLessThanOrEqualTo(Float value) {
            addCriterion("max_latitude <=", value, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeIn(List<Float> values) {
            addCriterion("max_latitude in", values, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeNotIn(List<Float> values) {
            addCriterion("max_latitude not in", values, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeBetween(Float value1, Float value2) {
            addCriterion("max_latitude between", value1, value2, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMaxLatitudeNotBetween(Float value1, Float value2) {
            addCriterion("max_latitude not between", value1, value2, "maxLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeIsNull() {
            addCriterion("min_latitude is null");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeIsNotNull() {
            addCriterion("min_latitude is not null");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeEqualTo(Float value) {
            addCriterion("min_latitude =", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeNotEqualTo(Float value) {
            addCriterion("min_latitude <>", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeGreaterThan(Float value) {
            addCriterion("min_latitude >", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeGreaterThanOrEqualTo(Float value) {
            addCriterion("min_latitude >=", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeLessThan(Float value) {
            addCriterion("min_latitude <", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeLessThanOrEqualTo(Float value) {
            addCriterion("min_latitude <=", value, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeIn(List<Float> values) {
            addCriterion("min_latitude in", values, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeNotIn(List<Float> values) {
            addCriterion("min_latitude not in", values, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeBetween(Float value1, Float value2) {
            addCriterion("min_latitude between", value1, value2, "minLatitude");
            return (Criteria) this;
        }

        public Criteria andMinLatitudeNotBetween(Float value1, Float value2) {
            addCriterion("min_latitude not between", value1, value2, "minLatitude");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table cycling_total
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table cycling_total
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}